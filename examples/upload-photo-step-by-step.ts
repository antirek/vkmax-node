import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

import { MaxClient, OPCODES, generateRandomId } from '../src/index.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ID —á–∞—Ç–∞ —Å –í–∞—Å–∏–ª–∏–µ–º
const VASILIY_CHAT_ID = 60815114;

/**
 * –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
 */
async function uploadPhotoStepByStep() {
    console.log('üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ...\n');
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º MaxClient...');
    const client = new MaxClient();
    console.log('‚úÖ MaxClient —Å–æ–∑–¥–∞–Ω\n');
    
    // –®–∞–≥ 2: –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ login_token.txt...');
    try {
        const tokenPath = path.join(__dirname, 'login_token.txt');
        const token = await fs.readFile(tokenPath, 'utf-8');
        const cleanToken = token.trim();
        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—á–∏—Ç–∞–Ω:', cleanToken.substring(0, 20) + '...\n');
        
        // –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        console.log('3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
        
        // –®–∞–≥ 4: –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        console.log('4Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø–æ —Ç–æ–∫–µ–Ω—É...');
        await client.loginByToken(cleanToken);
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n');
        
        // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª test-photo.jpg...');
        const photoPath = path.join(__dirname, 'test-photo.jpg');
        
        try {
            const stats = await fs.stat(photoPath);
            console.log('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω:', {
                —Ä–∞–∑–º–µ—Ä: `${Math.round(stats.size / 1024 * 100) / 100} KB`,
                –ø—É—Ç—å: photoPath
            });
        } catch (error) {
            console.log('‚ùå –§–∞–π–ª test-photo.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω');
            console.log('üí° –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const { execSync } = await import('child_process');
            try {
                execSync(`convert -size 300x200 -background lightblue -fill darkblue -gravity center -pointsize 24 label:"VK MAX\\nTest Photo\\n$(date '+%Y-%m-%d')" "${photoPath}"`);
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
            } catch (convertError) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ImageMagick');
                console.log('üí° –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É...');
                await fs.writeFile(photoPath, 'Test photo content');
            }
        }
        
        // –®–∞–≥ 6: –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        console.log('6Ô∏è‚É£ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ...');
        const photoData = await fs.readFile(photoPath);
        console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω:', {
            —Ä–∞–∑–º–µ—Ä: `${Math.round(photoData.length / 1024 * 100) / 100} KB`,
            –±–∞–π—Ç: photoData.length
        });
        console.log('');

        // –®–∞–≥ 7: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (opcode 80)
        console.log('7Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...');
        const uploadUrlResponse = await client.invokeMethod(OPCODES.REQUEST_UPLOAD_URL, { count: 1 });
        
        if (!uploadUrlResponse.payload?.url) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        }
        
        const uploadUrl = uploadUrlResponse.payload.url;
        console.log('‚úÖ URL –ø–æ–ª—É—á–µ–Ω:', uploadUrl.substring(0, 50) + '...');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const urlObj = new URL(uploadUrl);
        const apiToken = urlObj.searchParams.get('apiToken');
        const photoIds = urlObj.searchParams.get('photoIds');
        console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã:', {
            hasApiToken: !!apiToken,
            hasPhotoIds: !!photoIds
        });
        console.log('');

        // –®–∞–≥ 8: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ HTTP
        console.log('8Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ (–∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
        const blob = new Blob([photoData as any], { type: 'image/jpeg' });
        
        // –°–æ–∑–¥–∞–µ–º FormData
        const formData = new FormData();
        formData.append('file', blob, 'test-photo.jpg');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        const uploadResponse = await fetch(uploadUrl, {
            method: 'POST',
            body: formData
        });
        
        if (!uploadResponse.ok) {
            throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${uploadResponse.status} ${uploadResponse.statusText}`);
        }
        
        const uploadResult = await uploadResponse.json();
        console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä!');
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:', uploadResult);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
        const photoKey = Object.keys(uploadResult.photos || {})[0];
        const photoToken = uploadResult.photos?.[photoKey]?.token;
        
        if (!photoKey || !photoToken) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å photoKey –∏–ª–∏ photoToken –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã:', {
            photoKey: photoKey.substring(0, 20) + '...',
            hasToken: !!photoToken
        });
        console.log('');

        // –®–∞–≥ 9: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        console.log('9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –í–∞—Å–∏–ª–∏—é...');
        
        const messagePayload = {
            chatId: VASILIY_CHAT_ID,
            message: {
                text: 'üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—à–∞–≥–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–∞—à Node.js –∫–ª–∏–µ–Ω—Ç!',
                cid: generateRandomId(),
                elements: [],
                attaches: [{
                    _type: 'PHOTO',
                    type: 'PHOTO',
                    photoId: photoKey,
                    photoToken: photoToken,
                    width: 300,
                    height: 200,
                    baseUrl: `https://i.oneme.ru/i?r=${photoKey}`
                }]
            },
            notify: true
        };
        
        const sendResponse = await client.invokeMethod(OPCODES.SEND_MESSAGE, messagePayload);
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        console.log('üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
            success: sendResponse.payload ? '–î–∞' : '–ù–µ—Ç',
            hasAttaches: sendResponse.payload?.message?.attaches?.length > 0
        });
        
        console.log('\nüéâ –í–°–ï –®–ê–ì–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç —Å –í–∞—Å–∏–ª–∏–µ–º - —Ç–∞–º –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : String(error));
    } finally {
        // –®–∞–≥ 10: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        console.log('üîü –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
        if (client.isConnected) {
            client.disconnect();
        }
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
uploadPhotoStepByStep().catch(console.error);
