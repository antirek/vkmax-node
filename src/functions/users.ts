import { OPCODES } from '../constants.js';
import type { MaxClient } from '../client.js';
import type { RpcResponse } from '../types.js';

/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ VK MAX
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
 * 
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ –∏—Ö ID.
 * 
 * @param client - –≠–∫–∑–µ–º–ø–ª—è—Ä MaxClient
 * @param contactIds - –ú–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @returns Promise<RpcResponse> - –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
 * 
 * @example
 * ```typescript
 * const contacts = await getContacts(client, ['user123', 'user456']);
 * console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö:', contacts.payload);
 * ```
 */
export async function getContacts(
    client: MaxClient, 
    contactIds: string[]
): Promise<RpcResponse> {
    return await client.invokeMethod(OPCODES.GET_CONTACTS, {
        contactIds: contactIds
    });
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
 * 
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
 * 
 * @param client - –≠–∫–∑–µ–º–ø–ª—è—Ä MaxClient
 * @param contactId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
 * @returns Promise<RpcResponse> - –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 * 
 * @example
 * ```typescript
 * await addContact(client, 'user123');
 * console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã');
 * ```
 */
export async function addContact(
    client: MaxClient, 
    contactId: string
): Promise<RpcResponse> {
    return await client.invokeMethod(OPCODES.ADD_CONTACT, {
        contactId: contactId,
        action: "ADD"
    });
}

/**
 * –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * 
 * –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏-—Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∞–∫—Ü–∏–π.
 * 
 * @param client - –≠–∫–∑–µ–º–ø–ª—è—Ä MaxClient
 * @param chatId - ID —á–∞—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
 * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
 * @param reaction - –≠–º–æ–¥–∑–∏-—Ä–µ–∞–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üëç", "‚ù§Ô∏è", "üòÇ")
 * @returns Promise<void>
 * 
 * @example
 * ```typescript
 * // –î–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
 * await reactToMessage(client, 'chat123', 'msg456', 'üëç');
 * 
 * // –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ
 * await reactToMessage(client, 'chat123', 'msg456', '‚ù§Ô∏è');
 * ```
 */
export async function reactToMessage(
    client: MaxClient, 
    chatId: string, 
    messageId: string | number, 
    reaction: string
): Promise<void> {
    await client.invokeMethod(OPCODES.ADD_REACTION, {
        chatId: chatId,
        messageId: String(messageId),
        reaction: {
            reactionType: "EMOJI",
            id: reaction
        }
    });
    
    await client.invokeMethod(OPCODES.GET_REACTIONS, {
        chatId: chatId,
        messageId: String(messageId),
        count: 100
    });
} 